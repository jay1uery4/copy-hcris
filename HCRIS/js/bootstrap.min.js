// Mobile Menu Toggle
const hamburger = document.getElementById('hamburger');
const navLinks = document.getElementById('nav-links');

hamburger.addEventListener('click', () => {
    navLinks.classList.toggle('show');
});

// Enable/Disable the Verify OTP Button based on form validation
document.getElementById('patientForm').addEventListener('input', function () {
    const fieldsFilled = Array.from(document.querySelectorAll('#patientForm input[required], #patientForm select[required]'))
        .every(input => input.value.trim() !== '');

    const isPrivacyChecked = document.getElementById('privacyCheckbox').checked;
    document.getElementById('verifyOtpBtn').disabled = !fieldsFilled || !isPrivacyChecked;
});

// OTP verification function (for example purposes, you can add your own logic)
//function verifyOtp() {
    // Simulating an OTP check
 //   const otpValid = true; // Example, set to false to simulate failed OTP verification
 //   if (otpValid) {
  //      document.getElementById('submitPatientBtn').disabled = false; // Enable Submit button if OTP is valid
 //   } else {
  //      alert('OTP verification failed. Please try again.');
  //      document.getElementById('submitPatientBtn').disabled = true; // Keep Submit disabled on OTP failure
  //  }
//}

// Open the Privacy Terms Modal
document.getElementById('privacyLink').addEventListener('click', function (event) {
    event.preventDefault(); // Prevent the default anchor behavior
    document.getElementById('privacyModal').style.display = 'block';
});

// Close Privacy Terms Modal
document.getElementById('closePrivacyModal').addEventListener('click', function () {
    document.getElementById('privacyModal').style.display = 'none';
});

// Close Patient Modal
document.getElementById('closePatientModal').addEventListener('click', function () {
    document.getElementById('patientModal').style.display = 'none';
});

// Close Login Modal
document.getElementById('closeLoginModal').addEventListener('click', function () {
    document.getElementById('loginModal').style.display = 'none';
});



function verifyOtp() {
    // Open OTP modal
    window.location.href = "Verify-otp.html"; // Assuming you've set up the OTP page

    // Disable the submit button until OTP is verified
    submitPatientBtn.disabled = true;
}

//-------------------------------------About Modals--------------------------------------->
// Toggle password visibility for patient password field
document.getElementById('togglePatientPassword').addEventListener('click', function() {
    const passwordField = document.getElementById('patient-password');
    const type = passwordField.type === 'password' ? 'text' : 'password';
    passwordField.type = type; // Toggle the input type
});

// Toggle password visibility for confirm password field
document.getElementById('togglePatientConfirmPassword').addEventListener('click', function() {
    const confirmPasswordField = document.getElementById('patient-c-password');
    const type = confirmPasswordField.type === 'password' ? 'text' : 'password';
    confirmPasswordField.type = type; // Toggle the input type
});


// Get the toggle password element and input field
const togglePassword = document.getElementById('toggleLoginPassword');
const passwordField = document.getElementById('login-password');

// Add event listener to the eye icon for password toggle
togglePassword.addEventListener('click', function () {
    // Toggle the type of password field between 'password' and 'text'
    const type = passwordField.type === 'password' ? 'text' : 'password';
    passwordField.type = type;

    // Toggle eye icon
    if (passwordField.type === 'password') {
        togglePassword.innerHTML = '&#128065;'; // Eye icon (closed)
    } else {
        togglePassword.innerHTML = '&#128586;'; // Eye icon (opened)
    }
});



const signinSignupBtn = document.getElementById("signinSignupBtn");
const dropdownMenu = document.getElementById("dropdownMenu");
const downArrow = signinSignupBtn.querySelector(".fa-chevron-down");

// Toggle dropdown on click
signinSignupBtn.addEventListener("click", function (event) {
    event.preventDefault(); // Prevent default link behavior

    // Toggle the visibility of the dropdown menu
    dropdownMenu.classList.toggle("show");

    // Rotate the arrow based on visibility
    if (dropdownMenu.classList.contains("show")) {
        downArrow.style.transform = "rotate(180deg)";
    } else {
        downArrow.style.transform = "rotate(0deg)";
    }
});

// Close dropdown if clicked outside
document.addEventListener("click", function (event) {
    if (!signinSignupBtn.contains(event.target) && !dropdownMenu.contains(event.target)) {
        dropdownMenu.classList.remove("show");
        downArrow.style.transform = "rotate(0deg)"; // Reset arrow
    }
});


// Wait for the DOM content to fully load
document.addEventListener('DOMContentLoaded', function() {

    // Get modal elements and buttons
    const signupBtn = document.getElementById("signupBtn");
    const loginBtn = document.getElementById("loginBtn");

    const patientModal = document.getElementById("patientModal");
    const loginModal = document.getElementById("loginModal");

    const closePatientModal = document.getElementById("closePatientModal");
    const closeLoginModal = document.getElementById("closeLoginModal");

    // Show the Sign Up modal when the Sign Up button is clicked
    signupBtn.addEventListener("click", function(event) {
        event.preventDefault();
        patientModal.style.display = "block"; // Show the patient info modal
    });

    // Show the Login modal when the Login button is clicked
    loginBtn.addEventListener("click", function(event) {
        event.preventDefault();
        loginModal.style.display = "block"; // Show the login modal
    });

    // Close the Patient Info modal when the close button is clicked
    closePatientModal.addEventListener("click", function() {
        patientModal.style.display = "none"; // Hide the patient info modal
    });

    // Close the Login modal when the close button is clicked
    closeLoginModal.addEventListener("click", function() {
        loginModal.style.display = "none"; // Hide the login modal
    });

    // Close modals if the user clicks outside of the modal content
    window.addEventListener("click", function(event) {
        if (event.target === patientModal) {
            patientModal.style.display = "none";
        }
        if (event.target === loginModal) {
            loginModal.style.display = "none";
        }
    });

});


// Enable/Disable the Login Button based on form validation
document.getElementById('loginForm').addEventListener('input', function () {
    const username = document.getElementById('login-username').value.trim();
    const password = document.getElementById('login-password').value.trim();
    
    // Enable the login button only if both username and password fields are filled
    const loginSubmitBtn = document.getElementById('loginSubmitBtn');
    //loginSubmitBtn.disabled = !(username && password); // Enable if both fields are filled
});



// Get the modal, button, and close elements
const aboutUsBtn = document.getElementById('aboutUsBtn');
const aboutModal = document.getElementById('aboutModal');
const closeAboutModal = document.getElementById('closeAboutModal');

// Show the modal when the "About Us" button is clicked
aboutUsBtn.addEventListener('click', function() {
    // Get the position of the button
    const buttonRect = aboutUsBtn.getBoundingClientRect();
    
    // Position the modal near the button
    aboutModal.style.left = `${buttonRect.left}px`;
    aboutModal.style.top = `${buttonRect.top + buttonRect.height + 5}px`; // Position below the button
    
    // Show the modal
    aboutModal.classList.add('show');
});

// Close the modal when the close button is clicked
closeAboutModal.addEventListener('click', function() {
    aboutModal.classList.remove('show');
});

// Optionally, close the modal if the user clicks outside of it
window.addEventListener('click', function(event) {
    if (event.target === aboutModal) {
        aboutModal.classList.remove('show');
    }
});


// Modal Elements
const appointmentModal = document.getElementById("appointmentModal");
const closeAppointmentModal = document.getElementById("closeAppointmentModal");
const getAppointmentBtn = document.getElementById("getAppointmentBtn");

// Form Elements
const appointmentUsername = document.getElementById("appointment-username");
const appointmentForm = document.getElementById("appointmentForm");
const appointmentSubmitBtn = document.getElementById("appointmentSubmitBtn");

// Fetch logged-in user's information
function getLoggedInUser() {
    fetch('login.php', {
        method: 'GET', // Get request to fetch user info
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.loggedIn) {
            // Autofill the fullname field if logged in
            appointmentUsername.value = data.fullname;
        } else {
            appointmentUsername.value = ""; // Handle case where user is not logged in
        }
    })
    .catch(error => {
        console.error("Error fetching logged-in user:", error);
    });
}

// Open Modal (for appointment)
getAppointmentBtn.addEventListener("click", (e) => {
    e.preventDefault();
    appointmentModal.style.display = "block";
    
    // Fetch and fill the username if logged in
    getLoggedInUser();
});


// Close Modal
closeAppointmentModal.addEventListener("click", () => {
    appointmentModal.style.display = "none";
});

// Optionally, close modal if user clicks outside
window.addEventListener("click", (e) => {
    if (e.target === appointmentModal) {
        appointmentModal.style.display = "none";
    }
});


// Close Modal
closeAppointmentModal.addEventListener("click", () => {
    appointmentModal.style.display = "none";
});

// Handle Form Submission
appointmentForm.addEventListener("submit", (e) => {
    e.preventDefault();

    // Check if username is filled
    if (!appointmentUsername.value) {
        alert("Error: Username does not exist. Please register.");
        return;
    }

    // Success Message
    alert("Thank you for trusting us! Your appointment has been successfully scheduled.");
    appointmentForm.reset(); // Reset form fields
    appointmentModal.style.display = "none"; // Close modal
});

// Close modal when clicking outside the modal content
window.addEventListener("click", (e) => {
    if (e.target === appointmentModal) {
        appointmentModal.style.display = "none";
    }
});

//Code for saving a patient data into the datbase//
// Function to handle form submission via AJAX
function submitPatientData(event) {
    event.preventDefault(); // Prevent form from submitting normally

    const formData = new FormData(document.getElementById('patientForm'));

    const xhr = new XMLHttpRequest();
    xhr.open("POST", "submit_patient.php", true); // Adjust the URL to the actual PHP file

    xhr.onload = function () {
        if (xhr.status === 200) {
            // Handle success response
            alert(xhr.responseText);  // Show success message
        } else {
            // Handle error response
            alert("Error: " + xhr.responseText);
        }
    };

    xhr.send(formData);
}

// Add event listener to the form to submit via AJAX
document.getElementById("patientForm").addEventListener("submit", submitPatientData);

// Function to reset the form fields
function resetForm() {
    document.getElementById('patientForm').reset();  // Resets all fields to their default values (empty)
    document.getElementById('submitPatientBtn').disabled = true;  // Disable submit button after reset
}
// Add event listeners to enable/disable the submit button based on form validation
document.getElementById("patientForm").addEventListener("input", function () {
    const submitBtn = document.getElementById("submitPatientBtn");
    const fullname = document.getElementById("patient-fullname").value;
    const birthday = document.getElementById("patient-birthday").value;
    const age = document.getElementById("patient-age").value;
    const address = document.getElementById("patient-address").value;
    const socialStatus = document.getElementById("patient-socialStatus").value;
    const gender = document.getElementById("patient-gender").value;
    const username = document.getElementById("patient-username").value;
    const password = document.getElementById("patient-password").value;
    const confirmPassword = document.getElementById("patient-c-password").value;
    const privacyCheckbox = document.getElementById("privacyCheckbox").checked;

    // Check if any required fields are empty or passwords do not match
    if (fullname && birthday && age && address && socialStatus && gender && username && password && confirmPassword && privacyCheckbox) {
        if (password === confirmPassword) {
            submitBtn.disabled = false;  // Enable submit button if all fields are filled
        } else {
            submitBtn.disabled = true;  // Disable submit button if passwords don't match
        }
    } else {
        submitBtn.disabled = true;  // Disable submit button if any field is empty
    }
});

//Login portion 
function submitLoginForm(event) {
    event.preventDefault(); // Prevent default form submission

    const username = document.getElementById("patient-username").value;
    const password = document.getElementById("login-password").value;

    // Prepare AJAX request
    const xhr = new XMLHttpRequest();
    xhr.open("POST", "login.php", true);
    xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");

    xhr.onload = function() {
        if (xhr.status === 200) {
            const response = JSON.parse(xhr.responseText);

            if (response.success) {
                // Show SweetAlert popup message indicating successful login
                Swal.fire({
                    title: 'Login Successful!',
                    text: `You are now logged in as ${response.fullname}`,
                    icon: 'success',
                    confirmButtonText: 'Ok'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Store fullname in sessionStorage
                        sessionStorage.setItem("patientFullname", response.fullname);

                        // Update navbar with patient's fullname and change login button to logout
                        document.getElementById("patientFullname").innerText = `Welcome, ${response.fullname}`;

                        // Change the dropdown menu button to display logout
                        document.getElementById("signinSignupBtn").innerHTML = `
                            <i class="fas fa-user-circle"></i>
                            <span>Welcome, ${response.fullname}</span>
                            <i class="fas fa-chevron-down"></i>
                        `;

                        // Update dropdown menu to show logout option
                        const dropdownMenu = document.getElementById("dropdownMenu");
                        dropdownMenu.innerHTML = `
                            <li><a href="#" id="logoutBtn">Logout</a></li>
                        `;

                        // Add event listener for logout
                        document.getElementById("logoutBtn").addEventListener("click", logout);
                    }

                });
            } else {
                // Show error message if login fails
                document.getElementById("errorMessage").style.display = "block";
                document.getElementById("errorMessage").innerText = response.message;
            }
        } else {
            // Handle error with the AJAX request
            alert("There was an error processing your request.");
        }
    };

    // Send data to login.php
    xhr.send(`username=${username}&password=${password}`);
}

// Logout functionality with AJAX
function logout(event) {
    event.preventDefault(); // Prevent the default link behavior

    // Confirm logout via SweetAlert
    Swal.fire({
        title: 'Are you sure?',
        text: "Do you really want to sign out?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, sign out!',
        cancelButtonText: 'No, stay logged in'
    }).then((result) => {
        if (result.isConfirmed) {
            // Create AJAX request to call logout.php
            const xhr = new XMLHttpRequest();
            xhr.open("POST", "logout.php", true);
            xhr.onload = function() {
                if (xhr.status === 200) {
                    // On successful logout, clear sessionStorage and update UI
                    sessionStorage.removeItem("patientFullname"); // Clear session storage
                    document.getElementById("patientFullname").innerText = ""; // Clear welcome message

                    // Reset the dropdown button to show login
                    document.getElementById("signinSignupBtn").innerHTML = `
                        <i class="fas fa-user-circle"></i>
                        <span>Login</span>
                        <i class="fas fa-chevron-down"></i>
                    `;

                    // Reset dropdown menu to show login/signup options
                    const dropdownMenu = document.getElementById("dropdownMenu");
                    dropdownMenu.innerHTML = `
                        <li><a href="#" id="loginBtn">Login</a></li>
                        <li><a href="#" id="signupBtn">Sign Up</a></li>
                    `;

                    // Redirect to login page after logout (optional)
                    window.location.href = "index.html"; // Or adjust this based on your app's structure
                } else {
                    alert("Error logging out!"); // Error handling if logout fails
                }
            };
            xhr.send(); // Send the request to logout.php
        }
    });
}

document.getElementById("appointmentModal").addEventListener("show", () => {
    fetch("getLoggedInUser.php")
        .then((response) => response.json())
        .then((data) => {
            if (data.loggedIn) {
                document.getElementById("appointment-username").value = data.fullname || data.username;
            }
        })
        .catch((error) => console.error("Error fetching logged-in user:", error));
});

//Clear and close the modals after successfull login 
// Modal Elements
const loginModal = document.getElementById("loginModal");  // Make sure the modal ID is correct
const closeLoginModal = document.getElementById("closeLoginModal");
const loginForm = document.getElementById("loginForm"); // The form where username and password are entered

// Fetch logged-in user's information
function handleLoginResponse(data) {
    if (data.loggedIn) {
        // Successful login actions
        // Close the login modal
        loginModal.style.display = "none";

        // Clear the form fields
        loginForm.reset();
    } else {
        // Handle failed login (e.g., display error message)
        alert(data.message);
    }
}

// Handle form submission
function loginUser(event) {
    event.preventDefault();  // Prevent default form submission

    const formData = new FormData(loginForm);

    fetch('login.php', {
        method: 'POST',
        body: formData,
    })
    .then(response => response.json())
    .then(data => handleLoginResponse(data))
    .catch(error => {
        console.error("Error logging in:", error);
    });
}

// Attach event listener to the login form submission
loginForm.addEventListener("submit", loginUser);

// Close modal when the close button is clicked
closeLoginModal.addEventListener("click", () => {
    loginModal.style.display = "none";
    loginForm.reset(); // Clear the form fields when modal is closed manually
});

//save appointments 
// Get the form element

// Add event listener for form submission
appointmentForm.addEventListener("submit", function (e) {
    e.preventDefault(); // Prevent the form from submitting the usual way

    // Get form data
    const formData = new FormData(appointmentForm);
    
    // Send the data via AJAX to the PHP handler
    fetch('save_appointment.php', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Handle success (e.g., show a success message, reset form)
            alert(data.message); // Example: Display success message
            appointmentForm.reset(); // Reset the form fields
        } else {
            // Handle failure (e.g., show an error message)
            alert(data.message); // Example: Display error message
        }
    })
    .catch(error => {
        console.error("Error:", error);
    });
});
